
Project1404b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d2c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20070000  00080d2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004ed4  20070434  00081160  00020434  2**2
                  ALLOC
  3 .stack        00002000  20075308  00086034  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fef4  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000248f  00000000  00000000  000303aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003104  00000000  00000000  00032839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007f8  00000000  00000000  0003593d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000738  00000000  00000000  00036135  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017308  00000000  00000000  0003686d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c0d4  00000000  00000000  0004db75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000606fb  00000000  00000000  00059c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000117c  00000000  00000000  000ba344  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	08 73 07 20 5d 09 08 00 59 09 08 00 59 09 08 00     .s. ]...Y...Y...
   80010:	59 09 08 00 59 09 08 00 59 09 08 00 00 00 00 00     Y...Y...Y.......
	...
   8002c:	59 09 08 00 59 09 08 00 00 00 00 00 59 09 08 00     Y...Y.......Y...
   8003c:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   8004c:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   8005c:	59 09 08 00 59 09 08 00 59 09 08 00 00 00 00 00     Y...Y...Y.......
   8006c:	cd 07 08 00 e1 07 08 00 f5 07 08 00 09 08 08 00     ................
	...
   80084:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   80094:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   800a4:	00 00 00 00 59 09 08 00 9d 02 08 00 59 09 08 00     ....Y.......Y...
   800b4:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   800c4:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   800d4:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   800e4:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070434 	.word	0x20070434
   80110:	00000000 	.word	0x00000000
   80114:	00080d2c 	.word	0x00080d2c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080d2c 	.word	0x00080d2c
   80154:	20070438 	.word	0x20070438
   80158:	00080d2c 	.word	0x00080d2c
   8015c:	00000000 	.word	0x00000000

00080160 <adc_setup>:
#include <asf.h>
#include "adcdac.h"


void adc_setup()
{
   80160:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80162:	2025      	movs	r0, #37	; 0x25
   80164:	4b0e      	ldr	r3, [pc, #56]	; (801a0 <adc_setup+0x40>)
   80166:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);		//Configure for maximum frequency @ 84 MHz, CHECK THIS!!
   80168:	4c0e      	ldr	r4, [pc, #56]	; (801a4 <adc_setup+0x44>)
   8016a:	2300      	movs	r3, #0
   8016c:	4a0e      	ldr	r2, [pc, #56]	; (801a8 <adc_setup+0x48>)
   8016e:	490f      	ldr	r1, [pc, #60]	; (801ac <adc_setup+0x4c>)
   80170:	4620      	mov	r0, r4
   80172:	4d0f      	ldr	r5, [pc, #60]	; (801b0 <adc_setup+0x50>)
   80174:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80176:	2300      	movs	r3, #0
   80178:	461a      	mov	r2, r3
   8017a:	4619      	mov	r1, r3
   8017c:	4620      	mov	r0, r4
   8017e:	4d0d      	ldr	r5, [pc, #52]	; (801b4 <adc_setup+0x54>)
   80180:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   80182:	2100      	movs	r1, #0
   80184:	4620      	mov	r0, r4
   80186:	4b0c      	ldr	r3, [pc, #48]	; (801b8 <adc_setup+0x58>)
   80188:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);				//PB17 - AD8 for Arduino
   8018a:	210a      	movs	r1, #10
   8018c:	4620      	mov	r0, r4
   8018e:	4b0b      	ldr	r3, [pc, #44]	; (801bc <adc_setup+0x5c>)
   80190:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);			//trigg just by software
   80192:	2200      	movs	r2, #0
   80194:	4611      	mov	r1, r2
   80196:	4620      	mov	r0, r4
   80198:	4b09      	ldr	r3, [pc, #36]	; (801c0 <adc_setup+0x60>)
   8019a:	4798      	blx	r3
   8019c:	bd38      	pop	{r3, r4, r5, pc}
   8019e:	bf00      	nop
   801a0:	00080905 	.word	0x00080905
   801a4:	400c0000 	.word	0x400c0000
   801a8:	01312d00 	.word	0x01312d00
   801ac:	0a037a00 	.word	0x0a037a00
   801b0:	00080219 	.word	0x00080219
   801b4:	00080269 	.word	0x00080269
   801b8:	0008024d 	.word	0x0008024d
   801bc:	0008028b 	.word	0x0008028b
   801c0:	0008025b 	.word	0x0008025b

000801c4 <dac_setup>:
}




void dac_setup() {
   801c4:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
   801c6:	2026      	movs	r0, #38	; 0x26
   801c8:	4b0c      	ldr	r3, [pc, #48]	; (801fc <dac_setup+0x38>)
   801ca:	4798      	blx	r3
	dacc_reset(DACC);
   801cc:	4c0c      	ldr	r4, [pc, #48]	; (80200 <dac_setup+0x3c>)
   801ce:	4620      	mov	r0, r4
   801d0:	4b0c      	ldr	r3, [pc, #48]	; (80204 <dac_setup+0x40>)
   801d2:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
   801d4:	2100      	movs	r1, #0
   801d6:	4620      	mov	r0, r4
   801d8:	4b0b      	ldr	r3, [pc, #44]	; (80208 <dac_setup+0x44>)
   801da:	4798      	blx	r3
	dacc_set_timing(DACC,1,1,0);			//1 is shortest refresh period, 1 max. speed, 0 startup time
   801dc:	2300      	movs	r3, #0
   801de:	2201      	movs	r2, #1
   801e0:	4611      	mov	r1, r2
   801e2:	4620      	mov	r0, r4
   801e4:	4d09      	ldr	r5, [pc, #36]	; (8020c <dac_setup+0x48>)
   801e6:	47a8      	blx	r5
	
	dacc_set_channel_selection(DACC,0);		//Channel DAC0
   801e8:	2100      	movs	r1, #0
   801ea:	4620      	mov	r0, r4
   801ec:	4b08      	ldr	r3, [pc, #32]	; (80210 <dac_setup+0x4c>)
   801ee:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);			//enable DAC0
   801f0:	2100      	movs	r1, #0
   801f2:	4620      	mov	r0, r4
   801f4:	4b07      	ldr	r3, [pc, #28]	; (80214 <dac_setup+0x50>)
   801f6:	4798      	blx	r3
   801f8:	bd38      	pop	{r3, r4, r5, pc}
   801fa:	bf00      	nop
   801fc:	00080905 	.word	0x00080905
   80200:	400c8000 	.word	0x400c8000
   80204:	00080339 	.word	0x00080339
   80208:	0008033f 	.word	0x0008033f
   8020c:	00080373 	.word	0x00080373
   80210:	0008035b 	.word	0x0008035b
   80214:	000803a1 	.word	0x000803a1

00080218 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80218:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8021a:	2401      	movs	r4, #1
   8021c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   8021e:	2400      	movs	r4, #0
   80220:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80222:	f240 2502 	movw	r5, #514	; 0x202
   80226:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8022a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8022e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80232:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80234:	0052      	lsls	r2, r2, #1
   80236:	fbb1 f2f2 	udiv	r2, r1, r2
   8023a:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8023c:	0212      	lsls	r2, r2, #8
   8023e:	b292      	uxth	r2, r2
   80240:	432b      	orrs	r3, r5
   80242:	431a      	orrs	r2, r3
   80244:	6042      	str	r2, [r0, #4]
	return 0;
}
   80246:	4620      	mov	r0, r4
   80248:	bc30      	pop	{r4, r5}
   8024a:	4770      	bx	lr

0008024c <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   8024c:	6843      	ldr	r3, [r0, #4]
   8024e:	0109      	lsls	r1, r1, #4
   80250:	f001 0110 	and.w	r1, r1, #16
   80254:	4319      	orrs	r1, r3
   80256:	6041      	str	r1, [r0, #4]
   80258:	4770      	bx	lr

0008025a <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   8025a:	6843      	ldr	r3, [r0, #4]
   8025c:	01d2      	lsls	r2, r2, #7
   8025e:	b2d2      	uxtb	r2, r2
   80260:	4319      	orrs	r1, r3
   80262:	430a      	orrs	r2, r1
   80264:	6042      	str	r2, [r0, #4]
   80266:	4770      	bx	lr

00080268 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80268:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8026a:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   8026c:	0609      	lsls	r1, r1, #24
   8026e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80272:	4321      	orrs	r1, r4
   80274:	430a      	orrs	r2, r1
   80276:	0719      	lsls	r1, r3, #28
   80278:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   8027c:	4311      	orrs	r1, r2
   8027e:	6041      	str	r1, [r0, #4]
}
   80280:	bc10      	pop	{r4}
   80282:	4770      	bx	lr

00080284 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80284:	2302      	movs	r3, #2
   80286:	6003      	str	r3, [r0, #0]
   80288:	4770      	bx	lr

0008028a <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   8028a:	2301      	movs	r3, #1
   8028c:	fa03 f101 	lsl.w	r1, r3, r1
   80290:	6101      	str	r1, [r0, #16]
   80292:	4770      	bx	lr

00080294 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80294:	6a00      	ldr	r0, [r0, #32]
}
   80296:	4770      	bx	lr

00080298 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80298:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   8029a:	4770      	bx	lr

0008029c <TC0_Handler>:

/**
 *  Interrupt handler for TC0 interrupt.
 */
void TC0_Handler(void)
{
   8029c:	b530      	push	{r4, r5, lr}
   8029e:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;
	uint32_t invalue, outvalue;


	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);			//The compare bit is cleared by reading the register, manual p. 915
   802a0:	2100      	movs	r1, #0
   802a2:	481a      	ldr	r0, [pc, #104]	; (8030c <TC0_Handler+0x70>)
   802a4:	4b1a      	ldr	r3, [pc, #104]	; (80310 <TC0_Handler+0x74>)
   802a6:	4798      	blx	r3
   802a8:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   802aa:	9b01      	ldr	r3, [sp, #4]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   802ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   802b0:	4b18      	ldr	r3, [pc, #96]	; (80314 <TC0_Handler+0x78>)
   802b2:	631a      	str	r2, [r3, #48]	; 0x30
	
	ioport_set_pin_level(CHECK_PIN,HIGH);		//put test pin HIGH 
	
	adc_start(ADC);
   802b4:	4818      	ldr	r0, [pc, #96]	; (80318 <TC0_Handler+0x7c>)
   802b6:	4b19      	ldr	r3, [pc, #100]	; (8031c <TC0_Handler+0x80>)
   802b8:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x1<<24)==0);  //Wait until DRDY get high
   802ba:	4d17      	ldr	r5, [pc, #92]	; (80318 <TC0_Handler+0x7c>)
   802bc:	4c18      	ldr	r4, [pc, #96]	; (80320 <TC0_Handler+0x84>)
   802be:	4628      	mov	r0, r5
   802c0:	47a0      	blx	r4
   802c2:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   802c6:	d0fa      	beq.n	802be <TC0_Handler+0x22>

	invalue=adc_get_latest_value(ADC);			//get input value
   802c8:	4813      	ldr	r0, [pc, #76]	; (80318 <TC0_Handler+0x7c>)
   802ca:	4b16      	ldr	r3, [pc, #88]	; (80324 <TC0_Handler+0x88>)
   802cc:	4798      	blx	r3
	// Here should signal processing code be placed
	
	static uint16_t buffer[10000]={0};
	static uint32_t k=0;

	buffer[k]=invalue;
   802ce:	4b16      	ldr	r3, [pc, #88]	; (80328 <TC0_Handler+0x8c>)
   802d0:	681b      	ldr	r3, [r3, #0]
   802d2:	4a16      	ldr	r2, [pc, #88]	; (8032c <TC0_Handler+0x90>)
   802d4:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	k++;
   802d8:	3301      	adds	r3, #1
	if (k==10000) k=0;
   802da:	f242 7210 	movw	r2, #10000	; 0x2710
   802de:	4293      	cmp	r3, r2
   802e0:	d010      	beq.n	80304 <TC0_Handler+0x68>
	k++;
   802e2:	4a11      	ldr	r2, [pc, #68]	; (80328 <TC0_Handler+0x8c>)
   802e4:	6013      	str	r3, [r2, #0]
	outvalue = buffer[k]+invalue;
   802e6:	4b10      	ldr	r3, [pc, #64]	; (80328 <TC0_Handler+0x8c>)
   802e8:	681a      	ldr	r2, [r3, #0]
   802ea:	4b10      	ldr	r3, [pc, #64]	; (8032c <TC0_Handler+0x90>)
   802ec:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
	
	//***********
		

		
	dacc_write_conversion_data(DACC,outvalue);	//send output value to DAC
   802f0:	4401      	add	r1, r0
   802f2:	480f      	ldr	r0, [pc, #60]	; (80330 <TC0_Handler+0x94>)
   802f4:	4b0f      	ldr	r3, [pc, #60]	; (80334 <TC0_Handler+0x98>)
   802f6:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   802f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   802fc:	4b05      	ldr	r3, [pc, #20]	; (80314 <TC0_Handler+0x78>)
   802fe:	635a      	str	r2, [r3, #52]	; 0x34
	
	ioport_set_pin_level(CHECK_PIN,LOW);		//put test pin LOW
	
}
   80300:	b003      	add	sp, #12
   80302:	bd30      	pop	{r4, r5, pc}
	if (k==10000) k=0;
   80304:	2200      	movs	r2, #0
   80306:	4b08      	ldr	r3, [pc, #32]	; (80328 <TC0_Handler+0x8c>)
   80308:	601a      	str	r2, [r3, #0]
   8030a:	e7ec      	b.n	802e6 <TC0_Handler+0x4a>
   8030c:	40080000 	.word	0x40080000
   80310:	000803e5 	.word	0x000803e5
   80314:	400e1000 	.word	0x400e1000
   80318:	400c0000 	.word	0x400c0000
   8031c:	00080285 	.word	0x00080285
   80320:	00080299 	.word	0x00080299
   80324:	00080295 	.word	0x00080295
   80328:	20075270 	.word	0x20075270
   8032c:	20070450 	.word	0x20070450
   80330:	400c8000 	.word	0x400c8000
   80334:	00080357 	.word	0x00080357

00080338 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
   80338:	2301      	movs	r3, #1
   8033a:	6003      	str	r3, [r0, #0]
   8033c:	4770      	bx	lr

0008033e <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
   8033e:	b929      	cbnz	r1, 8034c <dacc_set_transfer_mode+0xe>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
   80340:	6843      	ldr	r3, [r0, #4]
   80342:	f023 0310 	bic.w	r3, r3, #16
   80346:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
   80348:	2000      	movs	r0, #0
   8034a:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
   8034c:	6843      	ldr	r3, [r0, #4]
   8034e:	f043 0310 	orr.w	r3, r3, #16
   80352:	6043      	str	r3, [r0, #4]
   80354:	e7f8      	b.n	80348 <dacc_set_transfer_mode+0xa>

00080356 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
   80356:	6201      	str	r1, [r0, #32]
   80358:	4770      	bx	lr

0008035a <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
   8035a:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
   8035c:	2901      	cmp	r1, #1
   8035e:	d901      	bls.n	80364 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
   80360:	2001      	movs	r0, #1
	}
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;
	return DACC_RC_OK;
}
   80362:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
   80364:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
   80368:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
   8036c:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
   8036e:	2000      	movs	r0, #0
   80370:	4770      	bx	lr

00080372 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
   80372:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
   80374:	6844      	ldr	r4, [r0, #4]
   80376:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
   8037a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
   8037e:	0209      	lsls	r1, r1, #8
   80380:	b289      	uxth	r1, r1
   80382:	4321      	orrs	r1, r4
	if (ul_maxs) {
   80384:	b94a      	cbnz	r2, 8039a <dacc_set_timing+0x28>
		mr |= DACC_MR_MAXS;
	} else {
		mr &= ~DACC_MR_MAXS;
   80386:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
   8038a:	061b      	lsls	r3, r3, #24
   8038c:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
   80390:	430b      	orrs	r3, r1
	p_dacc->DACC_MR = mr;
   80392:	6043      	str	r3, [r0, #4]
	return DACC_RC_OK;
}
   80394:	2000      	movs	r0, #0
   80396:	bc10      	pop	{r4}
   80398:	4770      	bx	lr
		mr |= DACC_MR_MAXS;
   8039a:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
   8039e:	e7f4      	b.n	8038a <dacc_set_timing+0x18>

000803a0 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
   803a0:	2901      	cmp	r1, #1
   803a2:	d901      	bls.n	803a8 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
   803a4:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
   803a6:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
   803a8:	2301      	movs	r3, #1
   803aa:	fa03 f101 	lsl.w	r1, r3, r1
   803ae:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
   803b0:	2000      	movs	r0, #0
   803b2:	4770      	bx	lr

000803b4 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   803b4:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803b6:	0189      	lsls	r1, r1, #6
   803b8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   803ba:	2402      	movs	r4, #2
   803bc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   803be:	f04f 31ff 	mov.w	r1, #4294967295
   803c2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   803c4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   803c6:	605a      	str	r2, [r3, #4]
}
   803c8:	bc10      	pop	{r4}
   803ca:	4770      	bx	lr

000803cc <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   803cc:	0189      	lsls	r1, r1, #6
   803ce:	2305      	movs	r3, #5
   803d0:	5043      	str	r3, [r0, r1]
   803d2:	4770      	bx	lr

000803d4 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   803d4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   803d8:	61ca      	str	r2, [r1, #28]
   803da:	4770      	bx	lr

000803dc <tc_enable_interrupt>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803dc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   803e0:	624a      	str	r2, [r1, #36]	; 0x24
   803e2:	4770      	bx	lr

000803e4 <tc_get_status>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803e4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   803e8:	6a08      	ldr	r0, [r1, #32]
}
   803ea:	4770      	bx	lr

000803ec <configure_tc>:

#include <asf.h>
#include "conf_tc.h"

void configure_tc(void)
{
   803ec:	b510      	push	{r4, lr}
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   803ee:	201b      	movs	r0, #27
   803f0:	4b0e      	ldr	r3, [pc, #56]	; (8042c <configure_tc+0x40>)
   803f2:	4798      	blx	r3

	/** Configure TC for a 10 kHz frequency and trigger on RC compare. */
	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz
   803f4:	4c0e      	ldr	r4, [pc, #56]	; (80430 <configure_tc+0x44>)
   803f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   803fa:	2100      	movs	r1, #0
   803fc:	4620      	mov	r0, r4
   803fe:	4b0d      	ldr	r3, [pc, #52]	; (80434 <configure_tc+0x48>)
   80400:	4798      	blx	r3
	tc_write_rc(TC0, 0, 4200);					//4200 corresponds to fs = 10 kHz
   80402:	f241 0268 	movw	r2, #4200	; 0x1068
   80406:	2100      	movs	r1, #0
   80408:	4620      	mov	r0, r4
   8040a:	4b0b      	ldr	r3, [pc, #44]	; (80438 <configure_tc+0x4c>)
   8040c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8040e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80412:	4b0a      	ldr	r3, [pc, #40]	; (8043c <configure_tc+0x50>)
   80414:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   80416:	2210      	movs	r2, #16
   80418:	2100      	movs	r1, #0
   8041a:	4620      	mov	r0, r4
   8041c:	4b08      	ldr	r3, [pc, #32]	; (80440 <configure_tc+0x54>)
   8041e:	4798      	blx	r3

	tc_start(TC0, 0);
   80420:	2100      	movs	r1, #0
   80422:	4620      	mov	r0, r4
   80424:	4b07      	ldr	r3, [pc, #28]	; (80444 <configure_tc+0x58>)
   80426:	4798      	blx	r3
   80428:	bd10      	pop	{r4, pc}
   8042a:	bf00      	nop
   8042c:	00080905 	.word	0x00080905
   80430:	40080000 	.word	0x40080000
   80434:	000803b5 	.word	0x000803b5
   80438:	000803d5 	.word	0x000803d5
   8043c:	e000e100 	.word	0xe000e100
   80440:	000803dd 	.word	0x000803dd
   80444:	000803cd 	.word	0x000803cd

00080448 <main>:
#include "sampel_int.h"



int main (void)
{
   80448:	b508      	push	{r3, lr}

	sysclk_init();
   8044a:	4b0d      	ldr	r3, [pc, #52]	; (80480 <main+0x38>)
   8044c:	4798      	blx	r3
	board_init();
   8044e:	4b0d      	ldr	r3, [pc, #52]	; (80484 <main+0x3c>)
   80450:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80452:	200b      	movs	r0, #11
   80454:	4c0c      	ldr	r4, [pc, #48]	; (80488 <main+0x40>)
   80456:	47a0      	blx	r4
   80458:	200c      	movs	r0, #12
   8045a:	47a0      	blx	r4
   8045c:	200d      	movs	r0, #13
   8045e:	47a0      	blx	r4
   80460:	200e      	movs	r0, #14
   80462:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80464:	4b09      	ldr	r3, [pc, #36]	; (8048c <main+0x44>)
   80466:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8046a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8046c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_init();

	ioport_set_pin_dir(CHECK_PIN, IOPORT_DIR_OUTPUT);	
	adc_setup();
   80470:	4b07      	ldr	r3, [pc, #28]	; (80490 <main+0x48>)
   80472:	4798      	blx	r3
	dac_setup();
   80474:	4b07      	ldr	r3, [pc, #28]	; (80494 <main+0x4c>)
   80476:	4798      	blx	r3
	configure_tc();
   80478:	4b07      	ldr	r3, [pc, #28]	; (80498 <main+0x50>)
   8047a:	4798      	blx	r3
   8047c:	e7fe      	b.n	8047c <main+0x34>
   8047e:	bf00      	nop
   80480:	0008049d 	.word	0x0008049d
   80484:	000804fd 	.word	0x000804fd
   80488:	00080905 	.word	0x00080905
   8048c:	400e1000 	.word	0x400e1000
   80490:	00080161 	.word	0x00080161
   80494:	000801c5 	.word	0x000801c5
   80498:	000803ed 	.word	0x000803ed

0008049c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8049c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8049e:	480d      	ldr	r0, [pc, #52]	; (804d4 <sysclk_init+0x38>)
   804a0:	4b0d      	ldr	r3, [pc, #52]	; (804d8 <sysclk_init+0x3c>)
   804a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   804a4:	213e      	movs	r1, #62	; 0x3e
   804a6:	2000      	movs	r0, #0
   804a8:	4b0c      	ldr	r3, [pc, #48]	; (804dc <sysclk_init+0x40>)
   804aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   804ac:	4c0c      	ldr	r4, [pc, #48]	; (804e0 <sysclk_init+0x44>)
   804ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   804b0:	2800      	cmp	r0, #0
   804b2:	d0fc      	beq.n	804ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   804b4:	4b0b      	ldr	r3, [pc, #44]	; (804e4 <sysclk_init+0x48>)
   804b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   804b8:	4a0b      	ldr	r2, [pc, #44]	; (804e8 <sysclk_init+0x4c>)
   804ba:	4b0c      	ldr	r3, [pc, #48]	; (804ec <sysclk_init+0x50>)
   804bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   804be:	4c0c      	ldr	r4, [pc, #48]	; (804f0 <sysclk_init+0x54>)
   804c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   804c2:	2800      	cmp	r0, #0
   804c4:	d0fc      	beq.n	804c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   804c6:	2010      	movs	r0, #16
   804c8:	4b0a      	ldr	r3, [pc, #40]	; (804f4 <sysclk_init+0x58>)
   804ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   804cc:	4b0a      	ldr	r3, [pc, #40]	; (804f8 <sysclk_init+0x5c>)
   804ce:	4798      	blx	r3
   804d0:	bd10      	pop	{r4, pc}
   804d2:	bf00      	nop
   804d4:	0501bd00 	.word	0x0501bd00
   804d8:	00080b0d 	.word	0x00080b0d
   804dc:	00080881 	.word	0x00080881
   804e0:	000808d5 	.word	0x000808d5
   804e4:	000808e5 	.word	0x000808e5
   804e8:	200d3f01 	.word	0x200d3f01
   804ec:	400e0600 	.word	0x400e0600
   804f0:	000808f5 	.word	0x000808f5
   804f4:	0008081d 	.word	0x0008081d
   804f8:	000809f5 	.word	0x000809f5

000804fc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   804fc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   804fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80502:	4b17      	ldr	r3, [pc, #92]	; (80560 <board_init+0x64>)
   80504:	605a      	str	r2, [r3, #4]
   80506:	200b      	movs	r0, #11
   80508:	4c16      	ldr	r4, [pc, #88]	; (80564 <board_init+0x68>)
   8050a:	47a0      	blx	r4
   8050c:	200c      	movs	r0, #12
   8050e:	47a0      	blx	r4
   80510:	200d      	movs	r0, #13
   80512:	47a0      	blx	r4
   80514:	200e      	movs	r0, #14
   80516:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80518:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8051c:	203b      	movs	r0, #59	; 0x3b
   8051e:	4c12      	ldr	r4, [pc, #72]	; (80568 <board_init+0x6c>)
   80520:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80522:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80526:	2055      	movs	r0, #85	; 0x55
   80528:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8052a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8052e:	2056      	movs	r0, #86	; 0x56
   80530:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80532:	490e      	ldr	r1, [pc, #56]	; (8056c <board_init+0x70>)
   80534:	2068      	movs	r0, #104	; 0x68
   80536:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80538:	490d      	ldr	r1, [pc, #52]	; (80570 <board_init+0x74>)
   8053a:	205c      	movs	r0, #92	; 0x5c
   8053c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8053e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80542:	f44f 7140 	mov.w	r1, #768	; 0x300
   80546:	480b      	ldr	r0, [pc, #44]	; (80574 <board_init+0x78>)
   80548:	4b0b      	ldr	r3, [pc, #44]	; (80578 <board_init+0x7c>)
   8054a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8054c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80550:	202b      	movs	r0, #43	; 0x2b
   80552:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80554:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80558:	202a      	movs	r0, #42	; 0x2a
   8055a:	47a0      	blx	r4
   8055c:	bd10      	pop	{r4, pc}
   8055e:	bf00      	nop
   80560:	400e1a50 	.word	0x400e1a50
   80564:	00080905 	.word	0x00080905
   80568:	0008061d 	.word	0x0008061d
   8056c:	28000079 	.word	0x28000079
   80570:	28000001 	.word	0x28000001
   80574:	400e0e00 	.word	0x400e0e00
   80578:	000806ed 	.word	0x000806ed

0008057c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8057c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8057e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80582:	d016      	beq.n	805b2 <pio_set_peripheral+0x36>
   80584:	d80b      	bhi.n	8059e <pio_set_peripheral+0x22>
   80586:	b149      	cbz	r1, 8059c <pio_set_peripheral+0x20>
   80588:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8058c:	d105      	bne.n	8059a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8058e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80590:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80592:	400b      	ands	r3, r1
   80594:	ea23 0302 	bic.w	r3, r3, r2
   80598:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8059a:	6042      	str	r2, [r0, #4]
   8059c:	4770      	bx	lr
	switch (ul_type) {
   8059e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   805a2:	d0fb      	beq.n	8059c <pio_set_peripheral+0x20>
   805a4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   805a8:	d0f8      	beq.n	8059c <pio_set_peripheral+0x20>
   805aa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   805ae:	d1f4      	bne.n	8059a <pio_set_peripheral+0x1e>
   805b0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   805b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   805b4:	4313      	orrs	r3, r2
   805b6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   805b8:	e7ef      	b.n	8059a <pio_set_peripheral+0x1e>

000805ba <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   805ba:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   805bc:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   805c0:	bf14      	ite	ne
   805c2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   805c4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   805c6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   805ca:	bf14      	ite	ne
   805cc:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   805ce:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   805d0:	f012 0f02 	tst.w	r2, #2
   805d4:	d107      	bne.n	805e6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   805d6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_SCIFSR = ul_mask;
   805da:	bf18      	it	ne
   805dc:	f8c0 1080 	strne.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   805e0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   805e2:	6001      	str	r1, [r0, #0]
   805e4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   805e6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   805ea:	e7f9      	b.n	805e0 <pio_set_input+0x26>

000805ec <pio_set_output>:
{
   805ec:	b410      	push	{r4}
   805ee:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   805f0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   805f2:	b944      	cbnz	r4, 80606 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   805f4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   805f6:	b143      	cbz	r3, 8060a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   805f8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   805fa:	b942      	cbnz	r2, 8060e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   805fc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   805fe:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80600:	6001      	str	r1, [r0, #0]
}
   80602:	bc10      	pop	{r4}
   80604:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80606:	6641      	str	r1, [r0, #100]	; 0x64
   80608:	e7f5      	b.n	805f6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8060a:	6541      	str	r1, [r0, #84]	; 0x54
   8060c:	e7f5      	b.n	805fa <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8060e:	6301      	str	r1, [r0, #48]	; 0x30
   80610:	e7f5      	b.n	805fe <pio_set_output+0x12>

00080612 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80612:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80614:	4770      	bx	lr

00080616 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80616:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80618:	4770      	bx	lr
	...

0008061c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8061c:	b570      	push	{r4, r5, r6, lr}
   8061e:	b082      	sub	sp, #8
   80620:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80622:	0943      	lsrs	r3, r0, #5
   80624:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80628:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8062c:	025c      	lsls	r4, r3, #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8062e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80632:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80636:	d031      	beq.n	8069c <pio_configure_pin+0x80>
   80638:	d816      	bhi.n	80668 <pio_configure_pin+0x4c>
   8063a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8063e:	d01b      	beq.n	80678 <pio_configure_pin+0x5c>
   80640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80644:	d116      	bne.n	80674 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80646:	f000 001f 	and.w	r0, r0, #31
   8064a:	2601      	movs	r6, #1
   8064c:	4086      	lsls	r6, r0
   8064e:	4632      	mov	r2, r6
   80650:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80654:	4620      	mov	r0, r4
   80656:	4b22      	ldr	r3, [pc, #136]	; (806e0 <pio_configure_pin+0xc4>)
   80658:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8065a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8065e:	bf14      	ite	ne
   80660:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80662:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80664:	2001      	movs	r0, #1
   80666:	e017      	b.n	80698 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80668:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8066c:	d021      	beq.n	806b2 <pio_configure_pin+0x96>
   8066e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80672:	d01e      	beq.n	806b2 <pio_configure_pin+0x96>
		return 0;
   80674:	2000      	movs	r0, #0
   80676:	e00f      	b.n	80698 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80678:	f000 001f 	and.w	r0, r0, #31
   8067c:	2601      	movs	r6, #1
   8067e:	4086      	lsls	r6, r0
   80680:	4632      	mov	r2, r6
   80682:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80686:	4620      	mov	r0, r4
   80688:	4b15      	ldr	r3, [pc, #84]	; (806e0 <pio_configure_pin+0xc4>)
   8068a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8068c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80690:	bf14      	ite	ne
   80692:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80694:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80696:	2001      	movs	r0, #1
}
   80698:	b002      	add	sp, #8
   8069a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8069c:	f000 011f 	and.w	r1, r0, #31
   806a0:	2601      	movs	r6, #1
   806a2:	462a      	mov	r2, r5
   806a4:	fa06 f101 	lsl.w	r1, r6, r1
   806a8:	4620      	mov	r0, r4
   806aa:	4b0e      	ldr	r3, [pc, #56]	; (806e4 <pio_configure_pin+0xc8>)
   806ac:	4798      	blx	r3
	return 1;
   806ae:	4630      	mov	r0, r6
		break;
   806b0:	e7f2      	b.n	80698 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   806b2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   806b6:	f000 011f 	and.w	r1, r0, #31
   806ba:	2601      	movs	r6, #1
   806bc:	ea05 0306 	and.w	r3, r5, r6
   806c0:	9300      	str	r3, [sp, #0]
   806c2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   806c6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   806ca:	bf14      	ite	ne
   806cc:	2200      	movne	r2, #0
   806ce:	2201      	moveq	r2, #1
   806d0:	fa06 f101 	lsl.w	r1, r6, r1
   806d4:	4620      	mov	r0, r4
   806d6:	4c04      	ldr	r4, [pc, #16]	; (806e8 <pio_configure_pin+0xcc>)
   806d8:	47a0      	blx	r4
	return 1;
   806da:	4630      	mov	r0, r6
		break;
   806dc:	e7dc      	b.n	80698 <pio_configure_pin+0x7c>
   806de:	bf00      	nop
   806e0:	0008057d 	.word	0x0008057d
   806e4:	000805bb 	.word	0x000805bb
   806e8:	000805ed 	.word	0x000805ed

000806ec <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   806ec:	b570      	push	{r4, r5, r6, lr}
   806ee:	b082      	sub	sp, #8
   806f0:	4605      	mov	r5, r0
   806f2:	460e      	mov	r6, r1
   806f4:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   806f6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   806fa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   806fe:	d027      	beq.n	80750 <pio_configure_pin_group+0x64>
   80700:	d811      	bhi.n	80726 <pio_configure_pin_group+0x3a>
   80702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80706:	d016      	beq.n	80736 <pio_configure_pin_group+0x4a>
   80708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8070c:	d111      	bne.n	80732 <pio_configure_pin_group+0x46>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8070e:	460a      	mov	r2, r1
   80710:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80714:	4b19      	ldr	r3, [pc, #100]	; (8077c <pio_configure_pin_group+0x90>)
   80716:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80718:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8071c:	bf14      	ite	ne
   8071e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80720:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80722:	2001      	movs	r0, #1
   80724:	e012      	b.n	8074c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80726:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8072a:	d015      	beq.n	80758 <pio_configure_pin_group+0x6c>
   8072c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80730:	d012      	beq.n	80758 <pio_configure_pin_group+0x6c>
		return 0;
   80732:	2000      	movs	r0, #0
   80734:	e00a      	b.n	8074c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80736:	460a      	mov	r2, r1
   80738:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8073c:	4b0f      	ldr	r3, [pc, #60]	; (8077c <pio_configure_pin_group+0x90>)
   8073e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80740:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80744:	bf14      	ite	ne
   80746:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80748:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8074a:	2001      	movs	r0, #1
}
   8074c:	b002      	add	sp, #8
   8074e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80750:	4b0b      	ldr	r3, [pc, #44]	; (80780 <pio_configure_pin_group+0x94>)
   80752:	4798      	blx	r3
	return 1;
   80754:	2001      	movs	r0, #1
		break;
   80756:	e7f9      	b.n	8074c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80758:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8075c:	f004 0301 	and.w	r3, r4, #1
   80760:	9300      	str	r3, [sp, #0]
   80762:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80766:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8076a:	bf14      	ite	ne
   8076c:	2200      	movne	r2, #0
   8076e:	2201      	moveq	r2, #1
   80770:	4631      	mov	r1, r6
   80772:	4628      	mov	r0, r5
   80774:	4c03      	ldr	r4, [pc, #12]	; (80784 <pio_configure_pin_group+0x98>)
   80776:	47a0      	blx	r4
	return 1;
   80778:	2001      	movs	r0, #1
		break;
   8077a:	e7e7      	b.n	8074c <pio_configure_pin_group+0x60>
   8077c:	0008057d 	.word	0x0008057d
   80780:	000805bb 	.word	0x000805bb
   80784:	000805ed 	.word	0x000805ed

00080788 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8078a:	4604      	mov	r4, r0
   8078c:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8078e:	4b0c      	ldr	r3, [pc, #48]	; (807c0 <pio_handler_process+0x38>)
   80790:	4798      	blx	r3
   80792:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80794:	4620      	mov	r0, r4
   80796:	4b0b      	ldr	r3, [pc, #44]	; (807c4 <pio_handler_process+0x3c>)
   80798:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8079a:	4005      	ands	r5, r0
   8079c:	d00f      	beq.n	807be <pio_handler_process+0x36>
   8079e:	4c0a      	ldr	r4, [pc, #40]	; (807c8 <pio_handler_process+0x40>)
   807a0:	e001      	b.n	807a6 <pio_handler_process+0x1e>
   807a2:	3410      	adds	r4, #16
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   807a4:	b15d      	cbz	r5, 807be <pio_handler_process+0x36>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   807a6:	6820      	ldr	r0, [r4, #0]
   807a8:	42b0      	cmp	r0, r6
   807aa:	d1fa      	bne.n	807a2 <pio_handler_process+0x1a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   807ac:	6861      	ldr	r1, [r4, #4]
   807ae:	4229      	tst	r1, r5
   807b0:	d0f7      	beq.n	807a2 <pio_handler_process+0x1a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   807b2:	68e3      	ldr	r3, [r4, #12]
   807b4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   807b6:	6863      	ldr	r3, [r4, #4]
   807b8:	ea25 0503 	bic.w	r5, r5, r3
   807bc:	e7f1      	b.n	807a2 <pio_handler_process+0x1a>
   807be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   807c0:	00080613 	.word	0x00080613
   807c4:	00080617 	.word	0x00080617
   807c8:	20075274 	.word	0x20075274

000807cc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   807cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   807ce:	210b      	movs	r1, #11
   807d0:	4801      	ldr	r0, [pc, #4]	; (807d8 <PIOA_Handler+0xc>)
   807d2:	4b02      	ldr	r3, [pc, #8]	; (807dc <PIOA_Handler+0x10>)
   807d4:	4798      	blx	r3
   807d6:	bd08      	pop	{r3, pc}
   807d8:	400e0e00 	.word	0x400e0e00
   807dc:	00080789 	.word	0x00080789

000807e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   807e0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   807e2:	210c      	movs	r1, #12
   807e4:	4801      	ldr	r0, [pc, #4]	; (807ec <PIOB_Handler+0xc>)
   807e6:	4b02      	ldr	r3, [pc, #8]	; (807f0 <PIOB_Handler+0x10>)
   807e8:	4798      	blx	r3
   807ea:	bd08      	pop	{r3, pc}
   807ec:	400e1000 	.word	0x400e1000
   807f0:	00080789 	.word	0x00080789

000807f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   807f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   807f6:	210d      	movs	r1, #13
   807f8:	4801      	ldr	r0, [pc, #4]	; (80800 <PIOC_Handler+0xc>)
   807fa:	4b02      	ldr	r3, [pc, #8]	; (80804 <PIOC_Handler+0x10>)
   807fc:	4798      	blx	r3
   807fe:	bd08      	pop	{r3, pc}
   80800:	400e1200 	.word	0x400e1200
   80804:	00080789 	.word	0x00080789

00080808 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80808:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8080a:	210e      	movs	r1, #14
   8080c:	4801      	ldr	r0, [pc, #4]	; (80814 <PIOD_Handler+0xc>)
   8080e:	4b02      	ldr	r3, [pc, #8]	; (80818 <PIOD_Handler+0x10>)
   80810:	4798      	blx	r3
   80812:	bd08      	pop	{r3, pc}
   80814:	400e1400 	.word	0x400e1400
   80818:	00080789 	.word	0x00080789

0008081c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8081c:	4a17      	ldr	r2, [pc, #92]	; (8087c <pmc_switch_mck_to_pllack+0x60>)
   8081e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80824:	4318      	orrs	r0, r3
   80826:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80828:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8082a:	f013 0f08 	tst.w	r3, #8
   8082e:	d10a      	bne.n	80846 <pmc_switch_mck_to_pllack+0x2a>
   80830:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80834:	4911      	ldr	r1, [pc, #68]	; (8087c <pmc_switch_mck_to_pllack+0x60>)
   80836:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80838:	f012 0f08 	tst.w	r2, #8
   8083c:	d103      	bne.n	80846 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8083e:	3b01      	subs	r3, #1
   80840:	d1f9      	bne.n	80836 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80842:	2001      	movs	r0, #1
   80844:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80846:	4a0d      	ldr	r2, [pc, #52]	; (8087c <pmc_switch_mck_to_pllack+0x60>)
   80848:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8084a:	f023 0303 	bic.w	r3, r3, #3
   8084e:	f043 0302 	orr.w	r3, r3, #2
   80852:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80854:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80856:	f013 0f08 	tst.w	r3, #8
   8085a:	d10a      	bne.n	80872 <pmc_switch_mck_to_pllack+0x56>
   8085c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80860:	4906      	ldr	r1, [pc, #24]	; (8087c <pmc_switch_mck_to_pllack+0x60>)
   80862:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80864:	f012 0f08 	tst.w	r2, #8
   80868:	d105      	bne.n	80876 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8086a:	3b01      	subs	r3, #1
   8086c:	d1f9      	bne.n	80862 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8086e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80870:	4770      	bx	lr
	return 0;
   80872:	2000      	movs	r0, #0
   80874:	4770      	bx	lr
   80876:	2000      	movs	r0, #0
   80878:	4770      	bx	lr
   8087a:	bf00      	nop
   8087c:	400e0600 	.word	0x400e0600

00080880 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80880:	b9c8      	cbnz	r0, 808b6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80882:	4a11      	ldr	r2, [pc, #68]	; (808c8 <pmc_switch_mainck_to_xtal+0x48>)
   80884:	6a13      	ldr	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80886:	0209      	lsls	r1, r1, #8
   80888:	b289      	uxth	r1, r1
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8088a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8088e:	f023 0303 	bic.w	r3, r3, #3
   80892:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80896:	f043 0301 	orr.w	r3, r3, #1
   8089a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8089c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8089e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   808a0:	f013 0f01 	tst.w	r3, #1
   808a4:	d0fb      	beq.n	8089e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   808a6:	4a08      	ldr	r2, [pc, #32]	; (808c8 <pmc_switch_mainck_to_xtal+0x48>)
   808a8:	6a13      	ldr	r3, [r2, #32]
   808aa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   808ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808b2:	6213      	str	r3, [r2, #32]
   808b4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   808b6:	4904      	ldr	r1, [pc, #16]	; (808c8 <pmc_switch_mainck_to_xtal+0x48>)
   808b8:	6a0b      	ldr	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   808ba:	4a04      	ldr	r2, [pc, #16]	; (808cc <pmc_switch_mainck_to_xtal+0x4c>)
   808bc:	401a      	ands	r2, r3
   808be:	4b04      	ldr	r3, [pc, #16]	; (808d0 <pmc_switch_mainck_to_xtal+0x50>)
   808c0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   808c2:	620b      	str	r3, [r1, #32]
   808c4:	4770      	bx	lr
   808c6:	bf00      	nop
   808c8:	400e0600 	.word	0x400e0600
   808cc:	fec8fffc 	.word	0xfec8fffc
   808d0:	01370002 	.word	0x01370002

000808d4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   808d4:	4b02      	ldr	r3, [pc, #8]	; (808e0 <pmc_osc_is_ready_mainck+0xc>)
   808d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808d8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   808dc:	4770      	bx	lr
   808de:	bf00      	nop
   808e0:	400e0600 	.word	0x400e0600

000808e4 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   808e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   808e8:	4b01      	ldr	r3, [pc, #4]	; (808f0 <pmc_disable_pllack+0xc>)
   808ea:	629a      	str	r2, [r3, #40]	; 0x28
   808ec:	4770      	bx	lr
   808ee:	bf00      	nop
   808f0:	400e0600 	.word	0x400e0600

000808f4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   808f4:	4b02      	ldr	r3, [pc, #8]	; (80900 <pmc_is_locked_pllack+0xc>)
   808f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808f8:	f000 0002 	and.w	r0, r0, #2
   808fc:	4770      	bx	lr
   808fe:	bf00      	nop
   80900:	400e0600 	.word	0x400e0600

00080904 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80904:	282c      	cmp	r0, #44	; 0x2c
   80906:	d81e      	bhi.n	80946 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80908:	281f      	cmp	r0, #31
   8090a:	d80c      	bhi.n	80926 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8090c:	4b11      	ldr	r3, [pc, #68]	; (80954 <pmc_enable_periph_clk+0x50>)
   8090e:	699a      	ldr	r2, [r3, #24]
   80910:	2301      	movs	r3, #1
   80912:	4083      	lsls	r3, r0
   80914:	4393      	bics	r3, r2
   80916:	d018      	beq.n	8094a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80918:	2301      	movs	r3, #1
   8091a:	fa03 f000 	lsl.w	r0, r3, r0
   8091e:	4b0d      	ldr	r3, [pc, #52]	; (80954 <pmc_enable_periph_clk+0x50>)
   80920:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80922:	2000      	movs	r0, #0
   80924:	4770      	bx	lr
		ul_id -= 32;
   80926:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80928:	4b0a      	ldr	r3, [pc, #40]	; (80954 <pmc_enable_periph_clk+0x50>)
   8092a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8092e:	2301      	movs	r3, #1
   80930:	4083      	lsls	r3, r0
   80932:	4393      	bics	r3, r2
   80934:	d00b      	beq.n	8094e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80936:	2301      	movs	r3, #1
   80938:	fa03 f000 	lsl.w	r0, r3, r0
   8093c:	4b05      	ldr	r3, [pc, #20]	; (80954 <pmc_enable_periph_clk+0x50>)
   8093e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80942:	2000      	movs	r0, #0
   80944:	4770      	bx	lr
		return 1;
   80946:	2001      	movs	r0, #1
   80948:	4770      	bx	lr
	return 0;
   8094a:	2000      	movs	r0, #0
   8094c:	4770      	bx	lr
   8094e:	2000      	movs	r0, #0
}
   80950:	4770      	bx	lr
   80952:	bf00      	nop
   80954:	400e0600 	.word	0x400e0600

00080958 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80958:	e7fe      	b.n	80958 <Dummy_Handler>
	...

0008095c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8095c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8095e:	4b1c      	ldr	r3, [pc, #112]	; (809d0 <Reset_Handler+0x74>)
   80960:	4a1c      	ldr	r2, [pc, #112]	; (809d4 <Reset_Handler+0x78>)
   80962:	429a      	cmp	r2, r3
   80964:	d010      	beq.n	80988 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80966:	4b1c      	ldr	r3, [pc, #112]	; (809d8 <Reset_Handler+0x7c>)
   80968:	4a19      	ldr	r2, [pc, #100]	; (809d0 <Reset_Handler+0x74>)
   8096a:	429a      	cmp	r2, r3
   8096c:	d20c      	bcs.n	80988 <Reset_Handler+0x2c>
   8096e:	3b01      	subs	r3, #1
   80970:	1a9b      	subs	r3, r3, r2
   80972:	f023 0303 	bic.w	r3, r3, #3
   80976:	3304      	adds	r3, #4
   80978:	4413      	add	r3, r2
   8097a:	4916      	ldr	r1, [pc, #88]	; (809d4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   8097c:	f851 0b04 	ldr.w	r0, [r1], #4
   80980:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80984:	429a      	cmp	r2, r3
   80986:	d1f9      	bne.n	8097c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80988:	4b14      	ldr	r3, [pc, #80]	; (809dc <Reset_Handler+0x80>)
   8098a:	4a15      	ldr	r2, [pc, #84]	; (809e0 <Reset_Handler+0x84>)
   8098c:	429a      	cmp	r2, r3
   8098e:	d20a      	bcs.n	809a6 <Reset_Handler+0x4a>
   80990:	3b01      	subs	r3, #1
   80992:	1a9b      	subs	r3, r3, r2
   80994:	f023 0303 	bic.w	r3, r3, #3
   80998:	3304      	adds	r3, #4
   8099a:	4413      	add	r3, r2
		*pDest++ = 0;
   8099c:	2100      	movs	r1, #0
   8099e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   809a2:	4293      	cmp	r3, r2
   809a4:	d1fb      	bne.n	8099e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   809a6:	4b0f      	ldr	r3, [pc, #60]	; (809e4 <Reset_Handler+0x88>)
   809a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   809ac:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   809b0:	490d      	ldr	r1, [pc, #52]	; (809e8 <Reset_Handler+0x8c>)
   809b2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   809b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   809b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   809bc:	d203      	bcs.n	809c6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   809be:	688b      	ldr	r3, [r1, #8]
   809c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   809c4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   809c6:	4b09      	ldr	r3, [pc, #36]	; (809ec <Reset_Handler+0x90>)
   809c8:	4798      	blx	r3

	/* Branch to main function */
	main();
   809ca:	4b09      	ldr	r3, [pc, #36]	; (809f0 <Reset_Handler+0x94>)
   809cc:	4798      	blx	r3
   809ce:	e7fe      	b.n	809ce <Reset_Handler+0x72>
   809d0:	20070000 	.word	0x20070000
   809d4:	00080d2c 	.word	0x00080d2c
   809d8:	20070434 	.word	0x20070434
   809dc:	20075308 	.word	0x20075308
   809e0:	20070434 	.word	0x20070434
   809e4:	00080000 	.word	0x00080000
   809e8:	e000ed00 	.word	0xe000ed00
   809ec:	00080b95 	.word	0x00080b95
   809f0:	00080449 	.word	0x00080449

000809f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   809f4:	4b3d      	ldr	r3, [pc, #244]	; (80aec <SystemCoreClockUpdate+0xf8>)
   809f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809f8:	f003 0303 	and.w	r3, r3, #3
   809fc:	2b03      	cmp	r3, #3
   809fe:	d80e      	bhi.n	80a1e <SystemCoreClockUpdate+0x2a>
   80a00:	e8df f003 	tbb	[pc, r3]
   80a04:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80a08:	4b39      	ldr	r3, [pc, #228]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a0a:	695b      	ldr	r3, [r3, #20]
   80a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80a10:	bf14      	ite	ne
   80a12:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80a16:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80a1a:	4b36      	ldr	r3, [pc, #216]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a1c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80a1e:	4b33      	ldr	r3, [pc, #204]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a26:	2b70      	cmp	r3, #112	; 0x70
   80a28:	d057      	beq.n	80ada <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80a2a:	4b30      	ldr	r3, [pc, #192]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a2e:	4931      	ldr	r1, [pc, #196]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a30:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80a34:	680b      	ldr	r3, [r1, #0]
   80a36:	40d3      	lsrs	r3, r2
   80a38:	600b      	str	r3, [r1, #0]
   80a3a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a3c:	4b2b      	ldr	r3, [pc, #172]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a3e:	6a1b      	ldr	r3, [r3, #32]
   80a40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a44:	d003      	beq.n	80a4e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a46:	4a2c      	ldr	r2, [pc, #176]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a48:	4b2a      	ldr	r3, [pc, #168]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a4a:	601a      	str	r2, [r3, #0]
   80a4c:	e7e7      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a4e:	4a2b      	ldr	r2, [pc, #172]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a50:	4b28      	ldr	r3, [pc, #160]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a52:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a54:	4b25      	ldr	r3, [pc, #148]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a56:	6a1b      	ldr	r3, [r3, #32]
   80a58:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a5c:	2b10      	cmp	r3, #16
   80a5e:	d005      	beq.n	80a6c <SystemCoreClockUpdate+0x78>
   80a60:	2b20      	cmp	r3, #32
   80a62:	d1dc      	bne.n	80a1e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80a64:	4a24      	ldr	r2, [pc, #144]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a66:	4b23      	ldr	r3, [pc, #140]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a68:	601a      	str	r2, [r3, #0]
				break;
   80a6a:	e7d8      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80a6c:	4a24      	ldr	r2, [pc, #144]	; (80b00 <SystemCoreClockUpdate+0x10c>)
   80a6e:	4b21      	ldr	r3, [pc, #132]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a70:	601a      	str	r2, [r3, #0]
				break;
   80a72:	e7d4      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a74:	4b1d      	ldr	r3, [pc, #116]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a76:	6a1b      	ldr	r3, [r3, #32]
   80a78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a7c:	d00c      	beq.n	80a98 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a7e:	4a1e      	ldr	r2, [pc, #120]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a80:	4b1c      	ldr	r3, [pc, #112]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a82:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80a84:	4b19      	ldr	r3, [pc, #100]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a88:	f003 0303 	and.w	r3, r3, #3
   80a8c:	2b02      	cmp	r3, #2
   80a8e:	d016      	beq.n	80abe <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80a90:	4a1c      	ldr	r2, [pc, #112]	; (80b04 <SystemCoreClockUpdate+0x110>)
   80a92:	4b18      	ldr	r3, [pc, #96]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a94:	601a      	str	r2, [r3, #0]
   80a96:	e7c2      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a98:	4a18      	ldr	r2, [pc, #96]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a9a:	4b16      	ldr	r3, [pc, #88]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a9c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a9e:	4b13      	ldr	r3, [pc, #76]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80aa0:	6a1b      	ldr	r3, [r3, #32]
   80aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80aa6:	2b10      	cmp	r3, #16
   80aa8:	d005      	beq.n	80ab6 <SystemCoreClockUpdate+0xc2>
   80aaa:	2b20      	cmp	r3, #32
   80aac:	d1ea      	bne.n	80a84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80aae:	4a12      	ldr	r2, [pc, #72]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80ab0:	4b10      	ldr	r3, [pc, #64]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80ab2:	601a      	str	r2, [r3, #0]
				break;
   80ab4:	e7e6      	b.n	80a84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80ab6:	4a12      	ldr	r2, [pc, #72]	; (80b00 <SystemCoreClockUpdate+0x10c>)
   80ab8:	4b0e      	ldr	r3, [pc, #56]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80aba:	601a      	str	r2, [r3, #0]
				break;
   80abc:	e7e2      	b.n	80a84 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80abe:	4a0b      	ldr	r2, [pc, #44]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80ac0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80ac2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80ac4:	480b      	ldr	r0, [pc, #44]	; (80af4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80ac6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80aca:	6803      	ldr	r3, [r0, #0]
   80acc:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80ad0:	b2d2      	uxtb	r2, r2
   80ad2:	fbb3 f3f2 	udiv	r3, r3, r2
   80ad6:	6003      	str	r3, [r0, #0]
   80ad8:	e7a1      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80ada:	4a06      	ldr	r2, [pc, #24]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80adc:	6813      	ldr	r3, [r2, #0]
   80ade:	490a      	ldr	r1, [pc, #40]	; (80b08 <SystemCoreClockUpdate+0x114>)
   80ae0:	fba1 1303 	umull	r1, r3, r1, r3
   80ae4:	085b      	lsrs	r3, r3, #1
   80ae6:	6013      	str	r3, [r2, #0]
   80ae8:	4770      	bx	lr
   80aea:	bf00      	nop
   80aec:	400e0600 	.word	0x400e0600
   80af0:	400e1a10 	.word	0x400e1a10
   80af4:	20070000 	.word	0x20070000
   80af8:	00b71b00 	.word	0x00b71b00
   80afc:	003d0900 	.word	0x003d0900
   80b00:	007a1200 	.word	0x007a1200
   80b04:	0e4e1c00 	.word	0x0e4e1c00
   80b08:	aaaaaaab 	.word	0xaaaaaaab

00080b0c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80b0c:	4b1b      	ldr	r3, [pc, #108]	; (80b7c <system_init_flash+0x70>)
   80b0e:	4298      	cmp	r0, r3
   80b10:	d915      	bls.n	80b3e <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   80b12:	4b1b      	ldr	r3, [pc, #108]	; (80b80 <system_init_flash+0x74>)
   80b14:	4298      	cmp	r0, r3
   80b16:	d919      	bls.n	80b4c <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   80b18:	4b1a      	ldr	r3, [pc, #104]	; (80b84 <system_init_flash+0x78>)
   80b1a:	4298      	cmp	r0, r3
   80b1c:	d91e      	bls.n	80b5c <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   80b1e:	4b1a      	ldr	r3, [pc, #104]	; (80b88 <system_init_flash+0x7c>)
   80b20:	4298      	cmp	r0, r3
   80b22:	d923      	bls.n	80b6c <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   80b24:	4b19      	ldr	r3, [pc, #100]	; (80b8c <system_init_flash+0x80>)
   80b26:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80b28:	bf94      	ite	ls
   80b2a:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   80b2e:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   80b32:	4a17      	ldr	r2, [pc, #92]	; (80b90 <system_init_flash+0x84>)
   80b34:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   80b36:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80b3a:	6013      	str	r3, [r2, #0]
   80b3c:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80b3e:	2300      	movs	r3, #0
   80b40:	4a13      	ldr	r2, [pc, #76]	; (80b90 <system_init_flash+0x84>)
   80b42:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   80b44:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80b48:	6013      	str	r3, [r2, #0]
   80b4a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   80b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
   80b50:	4a0f      	ldr	r2, [pc, #60]	; (80b90 <system_init_flash+0x84>)
   80b52:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   80b54:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80b58:	6013      	str	r3, [r2, #0]
   80b5a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   80b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
   80b60:	4a0b      	ldr	r2, [pc, #44]	; (80b90 <system_init_flash+0x84>)
   80b62:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   80b64:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80b68:	6013      	str	r3, [r2, #0]
   80b6a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   80b6c:	f44f 7340 	mov.w	r3, #768	; 0x300
   80b70:	4a07      	ldr	r2, [pc, #28]	; (80b90 <system_init_flash+0x84>)
   80b72:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   80b74:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80b78:	6013      	str	r3, [r2, #0]
   80b7a:	4770      	bx	lr
   80b7c:	0121eabf 	.word	0x0121eabf
   80b80:	02faf07f 	.word	0x02faf07f
   80b84:	03d08fff 	.word	0x03d08fff
   80b88:	04c4b3ff 	.word	0x04c4b3ff
   80b8c:	055d4a7f 	.word	0x055d4a7f
   80b90:	400e0a00 	.word	0x400e0a00

00080b94 <__libc_init_array>:
   80b94:	b570      	push	{r4, r5, r6, lr}
   80b96:	4e0f      	ldr	r6, [pc, #60]	; (80bd4 <__libc_init_array+0x40>)
   80b98:	4d0f      	ldr	r5, [pc, #60]	; (80bd8 <__libc_init_array+0x44>)
   80b9a:	1b76      	subs	r6, r6, r5
   80b9c:	10b6      	asrs	r6, r6, #2
   80b9e:	bf18      	it	ne
   80ba0:	2400      	movne	r4, #0
   80ba2:	d005      	beq.n	80bb0 <__libc_init_array+0x1c>
   80ba4:	3401      	adds	r4, #1
   80ba6:	f855 3b04 	ldr.w	r3, [r5], #4
   80baa:	4798      	blx	r3
   80bac:	42a6      	cmp	r6, r4
   80bae:	d1f9      	bne.n	80ba4 <__libc_init_array+0x10>
   80bb0:	4e0a      	ldr	r6, [pc, #40]	; (80bdc <__libc_init_array+0x48>)
   80bb2:	4d0b      	ldr	r5, [pc, #44]	; (80be0 <__libc_init_array+0x4c>)
   80bb4:	f000 f8a8 	bl	80d08 <_init>
   80bb8:	1b76      	subs	r6, r6, r5
   80bba:	10b6      	asrs	r6, r6, #2
   80bbc:	bf18      	it	ne
   80bbe:	2400      	movne	r4, #0
   80bc0:	d006      	beq.n	80bd0 <__libc_init_array+0x3c>
   80bc2:	3401      	adds	r4, #1
   80bc4:	f855 3b04 	ldr.w	r3, [r5], #4
   80bc8:	4798      	blx	r3
   80bca:	42a6      	cmp	r6, r4
   80bcc:	d1f9      	bne.n	80bc2 <__libc_init_array+0x2e>
   80bce:	bd70      	pop	{r4, r5, r6, pc}
   80bd0:	bd70      	pop	{r4, r5, r6, pc}
   80bd2:	bf00      	nop
   80bd4:	00080d14 	.word	0x00080d14
   80bd8:	00080d14 	.word	0x00080d14
   80bdc:	00080d1c 	.word	0x00080d1c
   80be0:	00080d14 	.word	0x00080d14

00080be4 <register_fini>:
   80be4:	4b02      	ldr	r3, [pc, #8]	; (80bf0 <register_fini+0xc>)
   80be6:	b113      	cbz	r3, 80bee <register_fini+0xa>
   80be8:	4802      	ldr	r0, [pc, #8]	; (80bf4 <register_fini+0x10>)
   80bea:	f000 b805 	b.w	80bf8 <atexit>
   80bee:	4770      	bx	lr
   80bf0:	00000000 	.word	0x00000000
   80bf4:	00080c05 	.word	0x00080c05

00080bf8 <atexit>:
   80bf8:	2300      	movs	r3, #0
   80bfa:	4601      	mov	r1, r0
   80bfc:	461a      	mov	r2, r3
   80bfe:	4618      	mov	r0, r3
   80c00:	f000 b81e 	b.w	80c40 <__register_exitproc>

00080c04 <__libc_fini_array>:
   80c04:	b538      	push	{r3, r4, r5, lr}
   80c06:	4c0a      	ldr	r4, [pc, #40]	; (80c30 <__libc_fini_array+0x2c>)
   80c08:	4d0a      	ldr	r5, [pc, #40]	; (80c34 <__libc_fini_array+0x30>)
   80c0a:	1b64      	subs	r4, r4, r5
   80c0c:	10a4      	asrs	r4, r4, #2
   80c0e:	d00a      	beq.n	80c26 <__libc_fini_array+0x22>
   80c10:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80c14:	3b01      	subs	r3, #1
   80c16:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80c1a:	3c01      	subs	r4, #1
   80c1c:	f855 3904 	ldr.w	r3, [r5], #-4
   80c20:	4798      	blx	r3
   80c22:	2c00      	cmp	r4, #0
   80c24:	d1f9      	bne.n	80c1a <__libc_fini_array+0x16>
   80c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80c2a:	f000 b877 	b.w	80d1c <_fini>
   80c2e:	bf00      	nop
   80c30:	00080d2c 	.word	0x00080d2c
   80c34:	00080d28 	.word	0x00080d28

00080c38 <__retarget_lock_acquire_recursive>:
   80c38:	4770      	bx	lr
   80c3a:	bf00      	nop

00080c3c <__retarget_lock_release_recursive>:
   80c3c:	4770      	bx	lr
   80c3e:	bf00      	nop

00080c40 <__register_exitproc>:
   80c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80c44:	4d2c      	ldr	r5, [pc, #176]	; (80cf8 <__register_exitproc+0xb8>)
   80c46:	4606      	mov	r6, r0
   80c48:	6828      	ldr	r0, [r5, #0]
   80c4a:	4698      	mov	r8, r3
   80c4c:	460f      	mov	r7, r1
   80c4e:	4691      	mov	r9, r2
   80c50:	f7ff fff2 	bl	80c38 <__retarget_lock_acquire_recursive>
   80c54:	4b29      	ldr	r3, [pc, #164]	; (80cfc <__register_exitproc+0xbc>)
   80c56:	681c      	ldr	r4, [r3, #0]
   80c58:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80c5c:	2b00      	cmp	r3, #0
   80c5e:	d03e      	beq.n	80cde <__register_exitproc+0x9e>
   80c60:	685a      	ldr	r2, [r3, #4]
   80c62:	2a1f      	cmp	r2, #31
   80c64:	dc1c      	bgt.n	80ca0 <__register_exitproc+0x60>
   80c66:	f102 0e01 	add.w	lr, r2, #1
   80c6a:	b176      	cbz	r6, 80c8a <__register_exitproc+0x4a>
   80c6c:	2101      	movs	r1, #1
   80c6e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80c72:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80c76:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80c7a:	4091      	lsls	r1, r2
   80c7c:	4308      	orrs	r0, r1
   80c7e:	2e02      	cmp	r6, #2
   80c80:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80c84:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80c88:	d023      	beq.n	80cd2 <__register_exitproc+0x92>
   80c8a:	3202      	adds	r2, #2
   80c8c:	f8c3 e004 	str.w	lr, [r3, #4]
   80c90:	6828      	ldr	r0, [r5, #0]
   80c92:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80c96:	f7ff ffd1 	bl	80c3c <__retarget_lock_release_recursive>
   80c9a:	2000      	movs	r0, #0
   80c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ca0:	4b17      	ldr	r3, [pc, #92]	; (80d00 <__register_exitproc+0xc0>)
   80ca2:	b30b      	cbz	r3, 80ce8 <__register_exitproc+0xa8>
   80ca4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80ca8:	f3af 8000 	nop.w
   80cac:	4603      	mov	r3, r0
   80cae:	b1d8      	cbz	r0, 80ce8 <__register_exitproc+0xa8>
   80cb0:	2000      	movs	r0, #0
   80cb2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80cb6:	f04f 0e01 	mov.w	lr, #1
   80cba:	6058      	str	r0, [r3, #4]
   80cbc:	6019      	str	r1, [r3, #0]
   80cbe:	4602      	mov	r2, r0
   80cc0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80cc4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80cc8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80ccc:	2e00      	cmp	r6, #0
   80cce:	d0dc      	beq.n	80c8a <__register_exitproc+0x4a>
   80cd0:	e7cc      	b.n	80c6c <__register_exitproc+0x2c>
   80cd2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80cd6:	4301      	orrs	r1, r0
   80cd8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80cdc:	e7d5      	b.n	80c8a <__register_exitproc+0x4a>
   80cde:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80ce2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ce6:	e7bb      	b.n	80c60 <__register_exitproc+0x20>
   80ce8:	6828      	ldr	r0, [r5, #0]
   80cea:	f7ff ffa7 	bl	80c3c <__retarget_lock_release_recursive>
   80cee:	f04f 30ff 	mov.w	r0, #4294967295
   80cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80cf6:	bf00      	nop
   80cf8:	20070430 	.word	0x20070430
   80cfc:	00080d04 	.word	0x00080d04
   80d00:	00000000 	.word	0x00000000

00080d04 <_global_impure_ptr>:
   80d04:	20070008                                ... 

00080d08 <_init>:
   80d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d0a:	bf00      	nop
   80d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d0e:	bc08      	pop	{r3}
   80d10:	469e      	mov	lr, r3
   80d12:	4770      	bx	lr

00080d14 <__init_array_start>:
   80d14:	00080be5 	.word	0x00080be5

00080d18 <__frame_dummy_init_array_entry>:
   80d18:	00080119                                ....

00080d1c <_fini>:
   80d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d1e:	bf00      	nop
   80d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d22:	bc08      	pop	{r3}
   80d24:	469e      	mov	lr, r3
   80d26:	4770      	bx	lr

00080d28 <__fini_array_start>:
   80d28:	000800f5 	.word	0x000800f5
